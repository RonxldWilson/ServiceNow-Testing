######### Day 1 ################

ServiceNow Testing

### Benefits of Software Testing?

-It is a part of the Software development Life Cycle(SDLC)
-It improves the quality of Software
-It helps in delivering in time
-It ensures that the project is done within the budget
-It helps ensures meeting the requirements
-It helps in providing a maintainable software

### Types of Software Testing
1. Manual testing - In this kind of testing the tester behaves like the end user
    and finds the flaws in the software as an end user.
2. Automation Testing - 


### Common Terms in Testing

1. Error: These are human mistakes
2. Bug/Defect: If some features are not working properly 
3. Failure: Failure happens on the user's end

Bug is from the programmer's perspective. Whereas Failure is from the end user's perspective.

## Why is Software Testing Important?

1. One of the principles of quality control is to get things right the first time.
    ST helps in acheiving that by ensuring the product developed is appropriate according to the requirements

2. It enhances the brand's image in the mind of end users

3. First impression is the last impression, and if the first impression is of a buugy software
    the user won't be very inclinded in using the software

4. Helps in providing a better user experience towards the user.

5. Saves the overhead costs of maintainance of the software

6. Helps in ensuring that various componets work together in well.

7. Helps to find, what are the possible risks associated with the software and to find 
    what are the limitations of the software
        specifically: Risks Imposed by the use of software.

8. Provides assuarance to the consumer that the application has been properly tested and is secur
    Warranty
    - Secure enough ?
    - Avaiable enough ?
    - Capacity enough ?
    - Continuoues enough?

9. Helps to ensure that the performance is optimal.

10. While Developing a software or a piece of code. That code can have impact on many people's life
    Software Testing ensures that this impact created by the piece of code doesn't cause harm to the users and other stakeholders


## Who will be involved in what stage?

1. Requirements Elicitation: The diffrent stakeholders will be involver
2. Designing: System Architects, and Developers
3. Development: Developers
4. Testing: Testers
5. Maintainance: Developers 

## Software Requirements Specification:

1. The User should be able to login to the platform securely.
    - There should be an option to reset the password

2. There should be an option to onbaord new users

3. the User should be able to send emails to the intended user on the same platform and other 
platforms by using their respective IDs in a secure manner

4. The user should be able to search thru the emails which they have sent or recived

5. The user should be able to access it thru any of the browsers and mobile devices

6. Notifications should be sent on recieving of a new email in the respectice devices


## Diffrent Types of SDLC

1. WaterFall Model: A software development model in which all the 
2. V model:
3. Incremental Model
4. RAD Model
5. Agile Model
6. Spiral model
7. Iterative Model


## WaterFall Model

Advantages:
    1. if the project is small and there is low chances of requirements changing then going forward
    with WaterFall model is the best choice
    2. Easy to implement in small teams and projects of small sclaes, in which the Requirements
    are well understood.
    3. Ample resources with required expertise are freely available.
    4. Technology is well understood
    5. There should be no amnbiguos requirements

Disadvantage:
    1. There is no scope for changes in the requirements as soon as we move to the next stage
    2. The end users don't get to see the final producat untill deployment period
    3. Extensive documentation is required before starting the project.
    4. Implementing feedback is expensive and time consuming.
    5. 

## Spiral Model

It is an evolutionary software process model which is an iterative nature of prototyping 
and systematic aspects of traditional WaterFall model.
Good for product based companies

Here you can go back to the previous stage
Barry Bohen first defined the this model in 1988

## When to use 
    -when the requirements are changing 

Phases of water Fall model
1. Plan Phases
2. Risk Analysis: All possible alternatives are analyzed 
3. Enginneering: 
4. Customer Evaluvation


## Advantages of Spiral Model
1. High amount of risk analysis hence, avoidance of Risk is enhanced.
2. Good for large and mission-critical projects.
3. Strong approval and documentation control.
4. Additional Functionality can be added at a later date.
5. Software is produced early in the software life cycle.

## Disadvantages of Spiral Model 
1. Can be a costly model to use.
2. Risk analysis requires highly specific expertise.
3. Project’s success is highly dependent on the risk analysis phase.
4. Doesn’t work well for smaller projects.

# When to use Spiral model?
1. When costs and risk evaluation is important
2. For medium to high-risk projects
3. Long-term project commitment unwise because of potential changes to economic priorities
4. Users are unsure of their needs
5. Requirements are complex
6 .New product line
7. Significant changes are expected (research and exploration)

## V Model
It is aka Verifciation and Validation model


    Requirements Analysis                           Acceptance Testing      //Acceptance Testing

        System Design                           System Testing              //System Test Design

            Architecture                    Integration Testing             //Integration Testing

                Module Design           Unit Testing                        //unit testing Design

                                Coding

## The Next phase starts only after completion of the preveious step
        
## Static Testing: Testing the project related documents(reviewing the document,walkthrough and inspection)
1. WhiteBox testing
2. BlackBox Testing

## Dynamic Testing: This is the actual testing 
1. Unit Testing
2. Integration Testing 
3. Sysetem Testing 
4. UAT


# what is Verifciation?

Verifciation checks whether we are building the right product or not
Focueses on documentation
typically involves reviewing,walkthrough and inspection

# what is Validation?
Validation checks whether we are building the product or not.
t
# What kind of companies which use V model

# Advantages
 
•	This is a highly disciplined model and Phases are completed one at a time.
•	V-Model is used for small projects where project requirements are clear.
•	Simple and easy to understand and use.
•	This model focuses on verification and validation activities early in the life cycle 
    thereby enhancing the   probability of building an error-free and good quality product.
•	It enables project management to track progress accurately.

# Disadvantages: 
 
•	High risk and uncertainty.
•	It is not a good for complex and object-oriented projects.
•	It is not suitable for projects where requirements are not clear and contains high risk of changing.
•	This model does not support iteration of phases.
•	It does not easily handle concurrent events.


## Agile Model
????


## Software Testing Life Cycles

1. Requirements Analysis:
    QA interacts with Stakeholders like Client, Business Analyst, System Anal;yst, Technical Lead.
    Important Descision of what all tests will be performed
2. Test Planning: It is document which contains the plan related to all testing 
    Senior QA Manager determines the test plan strategy
    The focus is on:
        What to Test
        What cannot be tested
        Tools used for Testing
        resources
        Test Duration 
        Riska and Contingency Planning

3. Test Case Development: Testing team write down all the test cases
    Prepare test Data 
    Test cases are reviewe3d by QA Lead
    Requirement Tracibility Matrix is prepared. The RTM is an industry accpted format for tracking requirements
    We can track backward and forward Tracibility
    OOB Thinking - Thinking outside of the box

4. Environment Setup:  Once the test case set is ready. The environment is Setup    
    For Example: Tools are decideded
        Selenium
        ATF for Seleneum
        QTP
        RPA

5. Test Execution: THe testers will carry out the testing based on the test plans and the test cases prepared   
    Bugs are reported to teh development team and then they resolve it

6. Test Closure: This is done mostly after the product is delivered
    Mainly comprises of:
    Ensure Test completion
    Handover Test Artifcats
    Project Retrospectives

## Selenium

It is browser optimised for framework that is commonly used for writing end to end test for Web Applicaiton
ServiceNow Can be tested using Selenium, but we use ATF for testing

############# Day 2 #############


#Unit Testing: before engaging the testing team, the developer tester their own code, 
    this is called as Unit Testing.

# User Personas: 

# Manual testing - In this kind of testing the tester behaves like the end user
    and finds the flaws in the software as an end user.

    -He has to prepare the test cases
    -The test cases are also called as bugs
    -They are manually  Created test cases
    -There is a priority value assigned to each of the test cases
    -What are the user personas and how do they see the application

    
# 
Test ID: 
It is also called as: Issue ID, case iD, Case No.

Naming convention examples:
ProjectName_ModuleName_Number [ RBT-IM-001]
ModuleName (short) –CaseID [IM001]

Creating a Test Case Template
   - Test ID : It is also called as Issue Id, Case ID, Case No
        - Naming Convention : ProjectName_ModuleName_Number [RBT_IM_001]  
                                        (or)
                              ModuleName(Short)_CaseID  [IM001]

   - Issue Description
   - Expected Output
   - Actual Output
   - Reference ID : Can be like Knowledge Article
   - Defect ID
   - Cycle 1 - First Round of Testing
   - Cycle 2 - Second Round of Testing
   - Comments : Our comments about the product / Application
   - Tested By : Name of the Tester
   - Date


--> Writing Test Cases is an important task in software testing, software testing job responsibilities

		- Understanding and Analyzing software requirements
		- Derive Positive and Negative test scenarios
		- Document Test Cases
		- Collect Test Data
		- Execute Test Cases
		- Analyze Test results
		- Report defects
		- Track defects
		- Re & Regression Testing
		- Organize & Maintain Software Test resources

   Test Case best practices 

		1. Consider Test Case based on Risk and Priority
		2. Remember the 80/20 Rule - 20 % of test will cover 80 % of your application
		3. Make sure your test cases can be completed by others when necessary
		4. The "Good Enough" test case
		5. Create Test case like you are running a marathon not a sprint
		6. List your test before you write them
		7. Classify Test Case based on Business Scenarios and functionality
		8. Not too long or too short
		9. Test drive your tests
		10. Run your tests regularly to keep them relevant


##################################
Types of Testing
1. Functional Testing: 
    - Systme Testing
    - Regression Testing
    - Smoke Testing
    - Sanity Testing
    - Unit Testing
    - Integration Testing 
    - Database Testing
    - WhiteBox Testing / Open Box Testing and Transperent Testing
    - BlackBox Testing
    - Gray Box Testing 
    - Monkey Testing 
    - AdHoc Testing
    - componet Testing
    - GUI Testing 
    - End to End Testing
    - UAT
        -Alpha
        -Beta 
    - Acceptance Testing 
    - Happy Path Testing 
    - Negative Testing

2. Non Functional testing
    a. performance testing
        - Load Testing
        - Stress testing
        - Volume Testing
    b. Security Testing
        - Penetration Testing
        - SQL Injection 
        - Vulnerability Testing
        - Authentication Testing
        - Username/ password

######### WhiteBox Testing ############

This is a technique in which we check 
    - Internal Structure
    - Design
    - Coding are tested
    
This type of testing is done by developers/coders
What do we verify in this type of testing?
    - Internal Security 
    - Broken Or Poorly Structured
    - The Flow

What are the techniqus of WhiteBox Testing?
    - Statement Coverage:
        Coverage = (Number of Statement Exercised/Total Number of Statments) *100
    - Branch Coverage
    - Condition Coverage: All the conditions should be covered

####################### BlackBox testing ############
BBT is a software Testing method in which the functionalities of software are tested
No need of having Knowledge of internal code structure or Design
This is performed by Testers

Black Box techniques
1. Equivalence class testing:
    Used to minimise number of test casses while ensurng optimal test cases
    also can be thought of as optimising 

2. Boundary Value Testing(BVA - Boundary Value analysis):
    Used to check if the certain range of values are covered or not

3. Descision Table Testing:
    It puts causes and there effect in a Matrix

4. State Transition Testing

############ Gray Box Testing ########
It is a Software Testing to set a s/w product or application with partial Knowledge of internal structure 
of the application

    - It provides combined benefits of both BBT and WhiteBox
    - It combines the input of developer and testers, this improves the overall quality of software
    - It Reduces the overhead of long process of testing functional and non-functional Types
    - 

Techniques of Gray Box Testing
    -Matrix Testing
    -Regression  Testing 
    -Pattern Testing 
    -orthogonal Array Testing


Diffrence Between WhiteBox V/S BlackBox V/S GrayBox

S. No.	Black Box Testing |||	Gray Box Testing ||| White Box Testing

1.	This testing has Low granularity.|||	
    This testing has a medium level of granularity.	|||
    This testing has high-level granularity.

2.	It is done by end-users and also done by the tester, developers.	
    It is done by end-users (called user acceptance testing), also done by testers and developers.	
    It is generally done by developers.

3.	Here, Internals are not required to be known.	
    Here, Internals relevant to the testing is known.	
    Here, the Internal code of the application and database is known.

4.	It is likely to be less exhaustive than the other two.	
    It is kind of in-between.	
    Most exhaustive among all three.

5.	It is based on requirements, and test cases on the functional specifications, as the internals are not known.	
    It provides better variety/depth in test cases on account of high-level knowledge of the internals.	
    It has the ability to exercise code with a relevant variety of data.

6.	If used algorithm testing, is not suited best for that.	
    If used algorithm testing is also not suited best for that.	
    If used algorithm testing, it is suited best for that.

7.	It is suited for functional or business testing.	
    It is suited for functional or business domain testing deeply.	
    It is used for all.

8.	This testing involves validating the outputs for given inputs, 
    the application being tested as a black-box technique.	
    
    Herein, we have a better variety of inputs and the ability to extract test results 
    from the database for comparison with expected results.	
    
    It involves structural testing and enables logic coverage, decisions, etc. within the code.

9.	This is also called Opaque-box testing, Closed-box testing, input-output testing, 
    Data-driven testing, Behavioral, Functional testing	
    
    This is also called translucent box testing	
    
    This is also called Glass-box testing, Clear-box testing, Design-based testing, 
    Logic-based testing, Structural testing, Code-based testing.

10.	#Black-box test design techniques-
    Decision table testing
    All-pairs testing
    Equivalence partitioning
    Error guessing

    #Gray box test design techniques-
    Matrix testing
    Regression testing 
    Pattern testing
    Orthogonal Array Testing

    #White-box test design techniques-
    Control flow testing
    Data flow testing
    Branch testing

11.	Black Box testing provides resilience and security against viral attacks. 	
    Gray Box testing does not provide resilience and security against viral attacks. 	
    White Box testing does not provide resilience and security against viral attacks.


    ############ 

    create the test case for P1 incidents
    
    response    
    resolution
    and notifications


##############
Notifications:
Assign to groups


############# 

# Benefits of using ATF 
    - Quicker go to market
    - 80% decrease in time and cost
    - Reduced man hour from 5days to 2 hours
    - Reports with real time screenshots
    - Creation of future test purpose template
    - improves the quality of the product
    - Simpler test Automation process

# Functions and Operations of ATF
    - Creating and Running tests
    - Adding and deleting steps
    - altering the order of Execution
    - Creating and running test suites
    - recording the details and enabling to view them along with screenshots
    - Transiting values from one step to next step
    - Changing the administarations setting
    - impersonate the user
    - open a new form like the catlog task form 
    - set field values on the forms like assigned to and Description or add field
    - 
# 